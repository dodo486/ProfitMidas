package bulls.staticData.ProdType.equity;


public enum IndexUnderlyingType {
    주식("010000"),
    주식시장대표("010100"),
    주식업종섹터("010200"),
    주식업종섹터건설("010201"),
    주식업종섹터중공업("010202"),
    주식업종섹터산업재("010203"),
    주식업종섹터금융("010204"),
    주식업종섹터에너지화학("010205"),
    주식업종섹터경기소비재("010206"),
    주식업종섹터생활소비재("010207"),
    주식업종섹터헬스케어("010208"),
    주식업종섹터정보기술("010209"),
    주식업종섹터철강소재("010210"),
    주식업종섹터업종테마("010211"),
    주식전략("010300"),
    주식전략가치("010301"),
    주식전략성장("010302"),
    주식전략배당("010303"),
    주식전략변동성("010304"),
    주식전략구조화("010305"),
    주식전략기업그룹("010306"),
    주식전략전략테마("010307"),
    주식전략혼합퀀트("010308"),
    주식규모("010400"),
    주식규모대형주("010401"),
    주식규모중형주("010402"),
    주식규모소형주("010403"),
    채권("020000"),
    채권혼합("020100"),
    채권혼합단기("020101"),
    채권혼합중기("020102"),
    채권혼합장기("020103"),
    채권국공채("020200"),
    채권국공채단기("020201"),
    채권국공채중기("020202"),
    채권국공채장기("020203"),
    채권회사채("020300"),
    채권회사채단기("020301"),
    채권회사채중기("020302"),
    채권회사채장기("020303"),
    원자재("030000"),
    원자재혼합("030100"),
    원자재금속("030200"),
    원자재금속혼합("030201"),
    원자재금속금("030202"),
    원자재금속은("030203"),
    원자재금속구리("030204"),
    원자재에너지("030300"),
    원자재에너지혼합("030301"),
    원자재에너지원유("030302"),
    원자재에너지천연가스("030303"),
    원자재농산물("030400"),
    원자재농산물혼합("030401"),
    원자재농산물콩("030402"),
    원자재농산물옥수수("030403"),
    부동산("040000"),
    부동산리츠("040100"),
    통화("050000"),
    통화미국달러("050100"),
    통화중국위안("050200"),
    통화일본엔("050300"),
    통화유로("050400"),
    혼합자산("060000"),
    혼합자산주식채권("060100"),
    혼합자산주식통화("060200"),
    변동성("070000"),
    변동성VIX("070100"),
    기타("080000");

    private final String fullCode;
    private final String aCode;
    private final String bCode;
    private final String cCode;

    IndexUnderlyingType(String code) {
        this.fullCode = code;
        this.aCode = code.substring(0, 2);
        this.bCode = code.substring(2, 4);
        this.cCode = code.substring(4, 6);

    }

    public static IndexUnderlyingType fromCode(String code) {
        for (IndexUnderlyingType uType : values()) {
            if (uType.fullCode.equals(code))
                return uType;
        }
        return null;
    }
}
